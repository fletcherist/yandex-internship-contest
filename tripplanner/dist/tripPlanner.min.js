/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var $errors = {
  noTrip: {
    cards: 'No any travel cards provided to the constructor. \n Please, provide some travel cards.'
  },
  invalidCard: {
    common: 'The following card is invalid: \n',
    noFrom: 'Missing starting location. Please, provide starting location [startingPoint]',
    noTo: 'Missing destination place. Please, provide destination place [to]',
    noTransport: 'Missing transport type. Please, provide transport type [transportType]'
  }
};

var TripPlanner = function () {
  function TripPlanner(cards) {
    _classCallCheck(this, TripPlanner);

    if (!cards) {
      throw new Error($errors.noTrip.cards);
    }

    this.cards = cards;
    this.sortedCards = [];

    this._validateCards();
    this._formatCards();
  }

  _createClass(TripPlanner, [{
    key: 'planTrip',
    value: function planTrip() {
      this._sortCards();
      return this;
    }
  }, {
    key: '_validateCards',
    value: function _validateCards() {
      this.cards.map(function (card) {
        var _error = null;
        if (!card.startingPoint) _error = 'noFrom';else if (!card.destinationPoint) _error = 'noTo';else if (!card.transportType) _error = 'noTransport';

        if (_error) {
          throw new Error($errors.invalidCard.common + JSON.stringify(card, {}, 4) + '\n' + $errors.invalidCard[_error]);
        }

        card.transportType = card.transportType.toLowerCase();
      });
    }

    // Give any card an unique identifier

  }, {
    key: '_formatCards',
    value: function _formatCards() {
      this.cards.map(function (card, index) {
        return card.id = index;
      });
    }
  }, {
    key: '_sortCards',
    value: function _sortCards() {
      var tables = {
        startingPoint: {},
        destinationPoint: {}
      };
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.cards[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var card = _step.value;

          tables.startingPoint[card.startingPoint] = card;
          tables.destinationPoint[card.destinationPoint] = card;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      for (var key in tables.startingPoint) {
        if (!tables.destinationPoint.hasOwnProperty(key)) {
          this.sortedCards.push(tables.startingPoint[key]);
          break;
        }
      }

      for (var i = 0; i < this.cards.length - 1; i++) {
        var currentCard = this.sortedCards[i];
        var nextCard = tables.startingPoint[currentCard.destinationPoint];
        this.sortedCards.push(nextCard);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var instructions = [];
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.sortedCards[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var card = _step2.value;

          instructions.push(this._composePassage(card));
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return instructions;
    }
  }, {
    key: 'renderToHTML',
    value: function renderToHTML() {
      var instructions = [];
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = this.sortedCards[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var card = _step3.value;

          instructions.push(this._composePassage(card, true));
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      var html = instructions.join('\n');
      return html;
    }
  }, {
    key: '_composePassage',
    value: function _composePassage(card, html) {
      var startingPoint = card.startingPoint,
          destinationPoint = card.destinationPoint,
          id = card.id;


      if (!html) html = false;

      var passage = '';

      var transport = this._formatTransport(card);
      var additional = this._formatAdditionalInformation(card);

      // Make it more human-friendly,
      // as in the example
      if (id % 3 === 0) {
        if (html) {
          passage = '\n          <div>\n            From <span data-start=\'1\'>' + startingPoint + '</span>\n            take <span data-transport=\'1\'>' + transport + '</span>\n            to <span data-destination=\'1\'>' + destinationPoint + '</span>.\n            <span data-additional=\'1\'>' + additional + '</span>\n          </div>';
        } else {
          passage = 'From ' + startingPoint + ', take ' + transport + ' to ' + destinationPoint + '. ' + additional;
        }
      } else {
        if (html) {
          passage = '\n          <div>\n            Take <span data-transport=\'1\'>' + transport + '</span> from\n            <span data-start=\'1\'>' + startingPoint + '</span> to\n            <span data-destination=\'1\'>' + destinationPoint + '</span>.\n            <span data-additional=\'1\'>' + additional + '</span>\n          </div>';
        } else {
          passage = 'Take ' + transport + ' from ' + startingPoint + ' to ' + destinationPoint + '. ' + additional;
        }
      }

      passage = passage.trim();
      return passage;
    }
  }, {
    key: '_formatTransport',
    value: function _formatTransport(card) {
      var transportType = card.transportType,
          additionalInfo = card.additionalInfo;
      var id = additionalInfo.id;


      var message = '';

      // Iterate over available transport
      // and return string depending
      // on type
      switch (transportType) {
        case 'aircraft':
        case 'airplane':
        case 'plane':
          message = 'flight';
          break;
        default:
          message = transportType;
          break;
      }

      if (id) {
        message += ' ' + id;
      }
      return message;
    }
  }, {
    key: '_formatAdditionalInformation',
    value: function _formatAdditionalInformation(card) {
      var additionalInfo = card.additionalInfo;

      var formattedInfo = '';

      for (var info in additionalInfo) {
        if (info) {
          switch (info) {
            case 'id':
              break;
            case 'baggage':
              // using `var` keyword instead of `let` here because of the linting errors
              var baggage = additionalInfo[info];
              if (baggage === 'auto') {
                formattedInfo += 'Baggage will be automatically transferred from your last leg.';
              } else {
                formattedInfo += 'Baggage drop at ticket counter ' + additionalInfo[info];
              }
              break;
            default:
              formattedInfo += capitalizeFirstLetter(info) + ' ' + additionalInfo[info] + '. ';
              break;
          }
        }
      }

      formattedInfo = formattedInfo.trim();
      return formattedInfo;
    }
  }]);

  return TripPlanner;
}();

function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

window.TripPlanner = TripPlanner;

/***/ })
/******/ ]);